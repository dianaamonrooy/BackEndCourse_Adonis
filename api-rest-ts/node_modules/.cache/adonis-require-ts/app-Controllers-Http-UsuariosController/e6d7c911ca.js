"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Usuario_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Usuario"));
class UsuariosController {
    async getListarUsuarios() {
        const user = await Usuario_1.default.all();
        return user;
    }
    async getListarUsuariosYPublicacion() {
        const user = await Usuario_1.default
            .query()
            .preload('publicaciones');
        return user;
    }
    async getListarUsuariosYPerfil() {
        const user = await Usuario_1.default
            .query()
            .preload('perfil');
        return user;
    }
    async getListarUsuariosGrupos() {
        const user = await Usuario_1.default
            .query()
            .preload('usuario_grupos');
        return user;
    }
    async setRegistrarUsuarios({ request, response }) {
        try {
            const dataUsuario = request.only(['codigo_usuario', 'nombre_usuario', 'contrasena', 'email', 'telefono', 'perfil']);
            const codigoUsuario = dataUsuario.codigo_usuario;
            const UsuarioExistente = await this.getValidarUsuarioExistente(codigoUsuario);
            if (UsuarioExistente === 0) {
                await Usuario_1.default.create(dataUsuario);
                response.status(200).json({ "msg": "Registro completado con Ã©xito" });
            }
            else {
                response.status(400).json({ "msg": "Error, el codigo usuario ya se encuentra registrado" });
            }
        }
        catch (error) {
            console.log(error);
            response.status(500).json({ "msg": "Error en el servidor" });
        }
    }
    async getValidarUsuarioExistente(codigo_usuario) {
        const total = await Usuario_1.default.query().where({ "codigo_Usuario": codigo_usuario }).count('*').from('usuarios');
        return parseInt(total[0]["count(*)"]);
    }
}
exports.default = UsuariosController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXN1YXJpb3NDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVXN1YXJpb3NDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsdUZBQXlDO0FBSXpDLE1BQXFCLGtCQUFrQjtJQUM5QixLQUFLLENBQUMsaUJBQWlCO1FBQzVCLE1BQU0sSUFBSSxHQUFHLE1BQU0saUJBQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQTtRQUNoQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBQ1EsS0FBSyxDQUFDLDZCQUE2QjtRQUN2QyxNQUFNLElBQUksR0FBRyxNQUFNLGlCQUFPO2FBQ3pCLEtBQUssRUFBRTthQUNQLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQTtRQUN6QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDSyxLQUFLLENBQUMsd0JBQXdCO1FBQ2xDLE1BQU0sSUFBSSxHQUFHLE1BQU0saUJBQU87YUFDekIsS0FBSyxFQUFFO2FBQ1AsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ2xCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNLLEtBQUssQ0FBQyx1QkFBdUI7UUFDakMsTUFBTSxJQUFJLEdBQUcsTUFBTSxpQkFBTzthQUN6QixLQUFLLEVBQUU7YUFDUCxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtRQUMxQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDSyxLQUFLLENBQUMsb0JBQW9CLENBQUUsRUFBQyxPQUFPLEVBQUUsUUFBUSxFQUFzQjtRQUN6RSxJQUFJO1lBQ0YsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLGdCQUFnQixFQUFFLGdCQUFnQixFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUE7WUFDbkgsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQztZQUNqRCxNQUFNLGdCQUFnQixHQUFXLE1BQU0sSUFBSSxDQUFDLDBCQUEwQixDQUFDLGFBQWEsQ0FBQyxDQUFBO1lBQ3JGLElBQUksZ0JBQWdCLEtBQUssQ0FBQyxFQUFDO2dCQUN6QixNQUFNLGlCQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO2dCQUNqQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLEtBQUssRUFBRSwrQkFBK0IsRUFBQyxDQUFDLENBQUE7YUFDcEU7aUJBQU07Z0JBQ0wsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxLQUFLLEVBQUUscURBQXFELEVBQUMsQ0FBQyxDQUFBO2FBQzFGO1NBQ0Y7UUFDRCxPQUFPLEtBQUssRUFBQztZQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDbEIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxLQUFLLEVBQUUsc0JBQXNCLEVBQUMsQ0FBQyxDQUFBO1NBQzNEO0lBQ0gsQ0FBQztJQUVPLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxjQUFzQjtRQUU3RCxNQUFNLEtBQUssR0FBRyxNQUFNLGlCQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUMsZ0JBQWdCLEVBQUUsY0FBYyxFQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ3pHLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO0lBQ3ZDLENBQUM7Q0FDRjtBQTlDRCxxQ0E4Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgIHtIdHRwQ29udGV4dENvbnRyYWN0fSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IFVzdWFyaW8gZnJvbSAnQXBwL01vZGVscy9Vc3VhcmlvJztcblxuXG4vKkNvbnRyb2xhZG9yIFVzdWFyaW8qL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXN1YXJpb3NDb250cm9sbGVyIHtcbiAgcHVibGljIGFzeW5jIGdldExpc3RhclVzdWFyaW9zKCk6IFByb21pc2UgPFVzdWFyaW9bXT57XG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzdWFyaW8uYWxsKClcbiAgICByZXR1cm4gdXNlcjtcbn1cbiAgcHVibGljIGFzeW5jIGdldExpc3RhclVzdWFyaW9zWVB1YmxpY2FjaW9uKCk6IFByb21pc2UgPFVzdWFyaW9bXT57XG4gICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc3VhcmlvIFxuICAgICAucXVlcnkoKVxuICAgICAucHJlbG9hZCgncHVibGljYWNpb25lcycpXG4gICAgIHJldHVybiB1c2VyO1xuICAgfSBcbiAgcHVibGljIGFzeW5jIGdldExpc3RhclVzdWFyaW9zWVBlcmZpbCgpOiBQcm9taXNlIDxVc3VhcmlvW10+e1xuICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXN1YXJpb1xuICAgICAucXVlcnkoKVxuICAgICAucHJlbG9hZCgncGVyZmlsJylcbiAgICAgcmV0dXJuIHVzZXI7XG4gICB9XG4gIHB1YmxpYyBhc3luYyBnZXRMaXN0YXJVc3Vhcmlvc0dydXBvcygpOiBQcm9taXNlIDxVc3VhcmlvW10+e1xuICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXN1YXJpb1xuICAgICAucXVlcnkoKVxuICAgICAucHJlbG9hZCgndXN1YXJpb19ncnVwb3MnKVxuICAgICByZXR1cm4gdXNlcjtcbiAgIH1cbiAgcHVibGljIGFzeW5jIHNldFJlZ2lzdHJhclVzdWFyaW9zICh7cmVxdWVzdCwgcmVzcG9uc2V9OiBIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGF0YVVzdWFyaW8gPSByZXF1ZXN0Lm9ubHkoWydjb2RpZ29fdXN1YXJpbycsICdub21icmVfdXN1YXJpbycsICdjb250cmFzZW5hJywgJ2VtYWlsJywgJ3RlbGVmb25vJywgJ3BlcmZpbCddKVxuICAgICAgY29uc3QgY29kaWdvVXN1YXJpbyA9IGRhdGFVc3VhcmlvLmNvZGlnb191c3VhcmlvO1xuICAgICAgY29uc3QgVXN1YXJpb0V4aXN0ZW50ZTogTnVtYmVyID0gYXdhaXQgdGhpcy5nZXRWYWxpZGFyVXN1YXJpb0V4aXN0ZW50ZShjb2RpZ29Vc3VhcmlvKVxuICAgICAgaWYgKFVzdWFyaW9FeGlzdGVudGUgPT09IDApe1xuICAgICAgICBhd2FpdCBVc3VhcmlvLmNyZWF0ZShkYXRhVXN1YXJpbylcbiAgICAgICAgcmVzcG9uc2Uuc3RhdHVzKDIwMCkuanNvbih7XCJtc2dcIjogXCJSZWdpc3RybyBjb21wbGV0YWRvIGNvbiDDqXhpdG9cIn0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNwb25zZS5zdGF0dXMoNDAwKS5qc29uKHtcIm1zZ1wiOiBcIkVycm9yLCBlbCBjb2RpZ28gdXN1YXJpbyB5YSBzZSBlbmN1ZW50cmEgcmVnaXN0cmFkb1wifSlcbiAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKXtcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgICAgcmVzcG9uc2Uuc3RhdHVzKDUwMCkuanNvbih7XCJtc2dcIjogXCJFcnJvciBlbiBlbCBzZXJ2aWRvclwifSlcbiAgICB9XG4gIH1cbiAgLypNw6l0b2RvIGRlIFZhbGlkYWNpw7NuIHBhcmEgVXN1YXJpbyovXG4gIHByaXZhdGUgYXN5bmMgZ2V0VmFsaWRhclVzdWFyaW9FeGlzdGVudGUoY29kaWdvX3VzdWFyaW86IE51bWJlcik6IFByb21pc2UgPE51bWJlcj4ge1xuICAgIC8qIFF1ZXJ5IHBhcmEgZ3J1cG8gKi9cbiAgICBjb25zdCB0b3RhbCA9IGF3YWl0IFVzdWFyaW8ucXVlcnkoKS53aGVyZSh7XCJjb2RpZ29fVXN1YXJpb1wiOiBjb2RpZ29fdXN1YXJpb30pLmNvdW50KCcqJykuZnJvbSgndXN1YXJpb3MnKVxuICAgIHJldHVybiBwYXJzZUludCh0b3RhbFswXVtcImNvdW50KCopXCJdKVxuICB9XG59XG5cbiJdfQ==